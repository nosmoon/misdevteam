package somo.framework.db;

import 	java.sql.*;
import 	java.util.*;
import	java.io.*;

import  somo.framework.prop.*;
/**
 * <PRE>
 * Filename : DBResultSet.java
 * Class    : comm.db.DBResultSet
 * Function : wrapper class of ResultSet
 * Comment  : ResultSet을 받아서 특정형태의 구조체 형태로 변환하는 클래스
 *		===========================================================
 *		필요 멤버변수 ;
 *		Hashtable	pt	 = new Hashtable();	//레코드를 담은 구조체역할을 하는 객체
 *		long		lPos = 0;	//레코드 위치
 *		long		lCnt = 0;	//레코드 갯수
 *
 *		1. 넘어온 rs를 순환하며 값을 다음과 같은 형식으로 필드값과 필드명을 매칭한다.
 *			getMetaData()를 이용하여 rsmd를 생성하고 각 필드타입에 따라 각
 *			필드 값을 String으로 처리 저장
 *			레코드는 각 필드명에 순번을 매겨 저장한다.
 *			pt.put( "Field" + m_nRecordCnt, value);
 *
 *		2. 읽어온 레코드 개수를 설정한다.
 *
 *		3. 레코드의 초기 순번(멤버변수)은 0으로 설정한다.
 *			int	nPos = 0;
 *
 *		4. rs.next()를 외부에서 호출할 경우 레코드 순번을 증가시킨다.
 *			nPos++;
 *
 *		5. getString( "field")를 한 경우
 *
 *		현재 nPos와 nCnt를 비교한다( 갯수보다 위치가 크면 안되므로)
 *		getProperty( "field" + nPos, "defaultvalue" )를 활용하여 값을 처리
 *		현재 nPos와 nCnt를 비교한다( 갯수보다 위치가 크면 안되므로)
 *		ret = getProperty( "field" + nPos, "defaultvalue" )를 활용하여 값을 처리
 *		그런 후  Long.parseLong( ret, 10 ).longValue()를 활용하여 처리.
 *
 *		6. getLong( "field" )를 한 경우
 *
 *		현재 nPos와 nCnt를 비교한다( 갯수보다 위치가 크면 안되므로)
 *		ret = getProperty( "field" + nPos, "defaultvalue" )를 활용하여 값을 처리
 *		그런 후  Long.parseLong( ret, 10 ).longValue()를 활용하여 처리.
 *
 * </PRE>
 *
 * @version	0.9
 * @author 	Copyright (c) 1999 by AZSolution Corp. All Rights Reserved.
 * @author
 * @see		EBPPDbManager
 */
public class DBResultSet implements Serializable
{
	private     boolean verbose = false;			// 화면출력여부 flag

	private     Vector	    m_vt	     = new Vector();		// 여러 레코드 담을 객체
	private     Properties	m_pt	     = new Properties();	// 레코드의 칼럼과 칼럼명을 담아 놓을 객체
	private     int	        m_nRecordPos = 0;					// 레코드 위치
	private     int	        m_nRecordCnt = 0;					// 레코드 갯수
	private     int	        m_nColumnCnt = 0;					// 레코드 컬럼 갯수
	//private     int	        m_nRowCount  = 0;					// 실제 ResultSet의 Row Count;


	/**
	 * ResultSet에서 모든 컬럼에 대해 DBResultSet구성
	 *
	 * (예)  select a, b, c, d FROM kkk;
	 *   	 makeSet(ResultSet);
	 *
	 * @param 	rs	SQL문에 대한 결과를 담고 있는 ResultSet
	 * @return 	true or false
	 */
	public DBResultSet (ResultSet rs) throws SQLException
	{
        try {
            Property prop 	= PropertyManager.getPropertyInstance();

            // Debug 유무 Setting
            if( prop.isDebug() ) {
                verbose = true;
            }
        }
        catch(Exception e)
	    {
	    	System.out.println("LIB -> DBResultSet : DBResultSet() "+ e.getMessage());
	    }

		if( ! makeSet( rs ) )
		{
			System.out.println("LIB -> DBResultSet : Make Set is false");
		}
	}

	/**
	 * 처음 레코드로 위치를 이동시키는 것
	 *
	 * @return true if so
	 */
	public boolean first()
	{
		if ( m_nRecordCnt <= 0 ) return false;	//레코드가 한 건도 없을 경우

		m_nRecordPos = 0;
		return true;
	}

	/**
	 * 다음 레코드로 위치를 이동시키는 것
	 *
	 * @return true if so
	 */
	public boolean next()
	{
		if ( verbose ) {
			System.out.println( "LIB -> next() Total Count -> " + m_nRecordCnt + ", Currnet Row ->" + m_nRecordPos );
		}

		if ( m_nRecordCnt <= 0 ) return false;	//레코드가 한 건도 없을 경우

		m_nRecordPos++;		// Current Position을 증가시킨다.

		if ( m_nRecordPos <= m_nRecordCnt )
		{
			return true;
		}

		return false;
	}

	/**
	 * 이전 레코드로 위치를 이동시키는 것
	 * 만약 레코드가 1개라도 있고 위치가 1에 있으면 0번 위치로 간다.
	 * @return true if so
	 */
	public boolean previous()
	{
		if ( verbose ) {
			System.out.println( "LIB -> previous()  TOTAL COUNT -> " + m_nRecordCnt + ", CURRENT ROW ->" + m_nRecordPos );
		}

		if ( m_nRecordCnt <= 0 ) return false;	//레코드가 한 건도 없을 경우

		if ( ( m_nRecordPos < 0 ) || ( m_nRecordPos > m_nRecordCnt ) )
			return false;						//레코드위치가 오류인 경우

		if ( m_nRecordPos  >= 1 )
		{
			m_nRecordPos--;
			return true;
		}

		return false;
	}

	/**
	 * 마지막 레코드로 위치를 이동시키는 것
	 *
	 * @return true if so
	 */
	public boolean last()
	{
		if ( m_nRecordCnt <= 0 ) return false;	//레코드가 한 건도 없을 경우
		m_nRecordPos = m_nRecordCnt;
		return true;
	}

	/**
	 * 특정 레코드로 위치를 이동시키는 것
	 *
	 * @return true if so
	 */
	public boolean move(int nPos)
	{
		boolean bRet = true;

		if ( verbose ) {
			System.out.println( "LIB -> move()  TOTAL COUNT -> " + m_nRecordCnt + ", CURRENT ROW ->" + m_nRecordPos +
			                    "   MOVED ROW -> " + nPos );
		}

		if ( m_nRecordCnt <= 0 ) return false;	//레코드가 한 건도 없을 경우

		int	nTmp = m_nRecordPos + nPos;
		if ( nTmp > m_nRecordCnt || ( nTmp < 0 ) )
			bRet = false;
		else
			bRet = true;

		m_nRecordPos += nPos;		// Current Position을 증가시킨다.


		return bRet;
	}

	/**
	 * ResultSet에서 scolPos에서 찾아 Hashtable에 저장을 한다.
	 * (예)  colPos + ResultSet의 scolPos에 있는 자료를 Set한다
	 *
	 * 주의: scolpos와 colPos를 구분하여야 한다.
	 *
	 * @param 	rs  SQL문에 대한 결과를 담고 있는 ResultSet
	 * @param 	pt  rs중 컬럼명와 자료를 담을 Properties
	 * @return 	true or false
	 */
    public boolean setData ( Hashtable pt, int nType, ResultSet rs, int scolPos, String colName ) throws SQLException
    {
        String		str 	= "";
        double		d	= 0;
        long		l	= 0;
        int     	n	= 0;

        java.sql.Date	dt	= null;
        Time            time 	= null;
        Timestamp		timestamp = null;
        byte			[]bt 	= null;
		ByteArrayInputStream	bais = null;

		try
        {
            switch (nType)
            {
                case Types.VARBINARY:
                case Types.BINARY:
                    bt = rs.getBytes( scolPos );
                    if( bt == null ) {
		    			str = "";
					}
					else {
		    			str = new String( bt);
					}
					pt.put( "" + colName , str );
                    break;

				case Types.LONGVARCHAR:
                	bais = (ByteArrayInputStream)rs.getAsciiStream( scolPos );
	    			int	ch 	= 0;
	    			int	i 	= 0;

	    			bt 	= new byte[bais.available()];
	    			bais.read( bt );
	    			str = new String( bt);
	    			pt.put( "" + colName , str );
	    			break;

				case Types.VARCHAR:
				case Types.CHAR:
				    str = rs.getString( scolPos );
				    if( str == null ) str = "";
				    pt.put( "" + colName , str );
				    break;

		        case Types.DOUBLE:
		        case Types.REAL:
		        case Types.FLOAT:
				    d 	= rs.getDouble( scolPos );
				    str	= new Double( d ).toString();
				    pt.put( "" + colName, str );
				    break;

		       	case Types.SMALLINT:
		       	case Types.TINYINT:
		       	case Types.INTEGER:
				    n   =  rs.getInt( scolPos );
				    str	= new Integer( n ).toString();
				    pt.put( "" + colName, str );
				    break;

		       	case Types.BIGINT:
			    	l 	= rs.getLong( scolPos );
			    	str	= new Long( l ).toString();
			    	pt.put( "" + colName, str );
			    	break;

		       	case Types.DECIMAL:
				case Types.NUMERIC:
				    d 	= rs.getDouble( scolPos );
				    str	= new Long( (long)d ).toString();
				    pt.put( "" + colName, str );
				    break;

				case Types.TIME:
				    time= rs.getTime( scolPos );
				    if( time == null ) time = new Time(0);
				    str	= time.toString();
				    pt.put( "" + colName, str );
				    break;

				case Types.TIMESTAMP:
				    timestamp = rs.getTimestamp( scolPos );
				    if( timestamp == null ) timestamp = new Timestamp(0);
				    str	= timestamp.toString();
				    pt.put( "" + colName, str );
				    break;

				case Types.DATE:
				    dt = rs.getDate( scolPos );
				    if( dt == null ) dt = new java.sql.Date(0);
				    str	= dt.toString();
				    pt.put( "" + colName, str );
				    break;

				default:
				    str = rs.getString( scolPos );
				    if( str == null ) str = "";
				    pt.put( "" + colName , str );
				    break;
			} //switch
			return true;
		}//end try
		catch( Exception e)
		{
		    System.out.println( "LIB -> DBResultSet : nType = " 	+ nType   );
		    System.out.println( "LIB -> DBResultSet : colName = " + colName + " 칼럼 catch error ===" + e  );
		    System.out.println( "LIB -> DBResultSet : scolPos = " + scolPos + " 칼럼 catch error ===" + e  );
		    return false;
		}
    }

    public boolean makeSet ( ResultSet rs ) throws SQLException
    {
		ResultSetMetaData	rsmd = rs.getMetaData();

		if ( rsmd == null ) return false;

		try
		{
		    m_nColumnCnt 	= rsmd.getColumnCount();	//칼럼개수
		    int	colPos 		= 1;						//칼럼 타입을 파악할 컬럼 위치
		    int	nType  		= 0;						//칼럼 타입
		    String	strColName  = "";					//칼럼 명
		    Hashtable	pt	= null;						//레코드를 담은 구조체역할을 하는 객체

	            //1. 레코드내의 칼럼갯수를 알아내어 그 수 만큼 순환.
		    for( colPos =1; colPos <= m_nColumnCnt ; colPos++ )
		    {
				//칼럼명을 얻어옴...
				strColName	= rsmd.getColumnName( colPos );
				//칼럼 위치와 칼럼명을 매핑
				m_pt.put ( ""+colPos , strColName.toLowerCase());
		    }//for

		    //2. 레코드 순환하며  값을 설정함
		    m_nRecordCnt 	= 0;
            if ( verbose ) {
                System.out.println("");
                System.out.println("------------ Get ResultSet After Execute Start ------------------");
            }
		    while( rs.next() )
		    {
				m_nRecordCnt++;			//레코드 갯수 증가시킴.
				pt	 = new Hashtable();	//레코드를 담은 구조체역할을 하는 객체
		        //3. 레코드내의 칼럼갯수 만큼 순환.
		        for( colPos =1; colPos <= m_nColumnCnt ; colPos++ )
		        {
		    	    nType       = rsmd.getColumnType( colPos );
	                strColName	= rsmd.getColumnName( colPos );
			    //4. 컬럼타입에 따라 값을 다르게 가져옴.
			    //   put하는 경우 어느 하나의 매개변수도 Null이면 안됨...
			        setData(pt,nType, rs, colPos, strColName.toLowerCase() );
		        } //for - 칼럼갯수만큼 순환
                if( verbose ) {
                        System.out.println("RowNum " + m_nRecordCnt + "\t" + pt.toString());
                }
	            m_vt.addElement(pt);
		    } //while - 레코드 갯수만큼 순환
            if ( verbose ) {
                System.out.println("Fetch Record Count = " + getRowCount() );
                System.out.println("------------ Get ResultSet After Execute End   ------------------");
                System.out.println("");
            }

	    	return true;
        } //try finish
        catch (Exception e)
        {
		    System.out.println("LIB -> DBResultSet :  makeSet() Error ");
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
		return false;
    }

    /**
    * 칼럼Index로 컬럼명을 얻고자 할 경우 해당
    * 모두 소문자로 처리하여 비교 함.
    * @param 	String 	columnIndex
    * @return 	int 	칼럼의 위치
    */
    protected	String	findIndex(int columnIndex)
    {
        try
        {
            //default value로 ""을 설정
	    	return   (String)m_pt.get(""+ columnIndex ) ;
        }
        catch (Exception e)
        {
            System.out.println("DBResultSet : findIndex Error At " + columnIndex + " position" );
            System.out.println("DBResultSet : " + e.getMessage() );
            e.printStackTrace();
        }

		return "";
    }

    /**
     * byte 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Name
     * @return 	byte
     */
    public	byte	getByte(String columnName)
    {
        try
		{
            if( m_nRecordPos <= 0 ) return -1;
		    Hashtable	pt	= (Hashtable)m_vt.elementAt(  m_nRecordPos -1 );
		    Byte	bt	= new Byte( (String)pt.get( columnName.toLowerCase() ) );//default value로 0을 설정
		    return bt.byteValue();
		}
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getByte Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
	    	e.printStackTrace();
        }
		return -1;
    }

    /**
     * byte 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	int	Column Index
     * @return 	byte
     */
    public	byte	getByte(int columnIndex)
    {
    	//칼럼의 위치로 찾아내는 메소드를 이용함...
		return getByte( findIndex(columnIndex) );
    }

    /**
     * Time 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Name
     * @return 	Time
     */
    public	Time	getTime(String columnName)
    {
    	try
		{
            if( m_nRecordPos <= 0 ) return null;
	    	Hashtable 	pt	= (Hashtable)m_vt.elementAt( m_nRecordPos -1 );
	    	Time	time 	= Time.valueOf((String)pt.get( columnName.toLowerCase() ) );
            return time;
		}
        catch (Exception e)
		{
	    	System.out.println("LIB -> DBResultSet : getTime Error At " + columnName.toLowerCase());
	    	System.out.println("LIB -> DBResultSet : " + e.getMessage() );
	    	e.printStackTrace();
        }
		return null;
    }

    /**
     * Time 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	int	Column Index
     * @return 	Time
     */
    public	java.sql.Time	getTime(int columnIndex)
    {
    	//칼럼의 위치로 찾아내는 메소드를 이용함...
    	return getTime( findIndex(columnIndex) );
    }

    /**
     * Timestamp 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Name
     * @return 	Timestamp
     */
    public	Timestamp	getTimestamp(String columnName)
    {
		try
		{
	        if( m_nRecordPos <= 0 ) return null;
		    Hashtable	pt  = (Hashtable)m_vt.elementAt( m_nRecordPos -1 );
		    Timestamp	time= Timestamp.valueOf( (String)pt.get( columnName.toLowerCase() ) );
		    return time;
		}
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getTimestamp Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
		return null;
    }

    /**
     * Timestamp 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	int	Column Index
     * @return 	Timestamp
     */
    public	java.sql.Timestamp	getTimestamp(int columnIndex)
    {
    	//칼럼의 위치로 찾아내는 메소드를 이용함...
    	return getTimestamp( findIndex(columnIndex) );
    }

    /**
     * Date 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Index
     * @return 	Date
     */
    public	java.sql.Date	getDate(String columnName)
    {
		try
		{
            if( m_nRecordPos <= 0 ) return null;
		    Hashtable		pt   = (Hashtable)m_vt.elementAt( m_nRecordPos -1 );
		    java.sql.Date	date = java.sql.Date.valueOf( (String)pt.get(columnName.toLowerCase() ) );
            return date;
		}
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getDate Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
		return null;
    }

    /**
     * Date 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	String	Column Name
     * @return 	Date
     */
    public	java.sql.Date	getDate(int columnIndex)
    {
    	//칼럼의 위치로 찾아내는 메소드를 이용함...
    	return getDate( findIndex(columnIndex) );
    }

    /**
     * double 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Name
     * @return 	double
     */
    public	double	getDouble(String columnName)
    {
    	try
		{
            if( m_nRecordPos <= 0 ) return -1;

            Hashtable	pt	= (Hashtable)m_vt.elementAt(  m_nRecordPos -1 );
	    	//default value로 0을 설정
	    	Double	bt	= new Double( (String) pt.get( columnName.toLowerCase() ) );
	    	return bt.doubleValue();
		}
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getDouble Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
        return -1;
    }

    /**
     * double 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	int	Column Index
     * @return 	double
     */
    public	double	getDouble(int columnIndex)
    {
		//칼럼의 위치로 찾아내는 메소드를 이용함...
		return getDouble( findIndex(columnIndex) );
    }

    /**
     * float 타입 칼럼을 Column Name를 이용하여 얻는다.
     *
     * @param 	String 	Column Name
     * @return 	float
     */
    public	float	getFloat(String columnName)
    {
    	try
		{
		    if( m_nRecordPos <= 0 ) return -1;
		    Hashtable	pt	= (Hashtable)m_vt.elementAt(  m_nRecordPos -1 );
		    Float	bt	= new Float( (String)pt.get(columnName.toLowerCase()) );
		    return bt.floatValue();
		}
		catch (Exception e)
        {
		    System.out.println("LIB -> DBResultSet : getFloat Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
            e.printStackTrace();
		}
		return -1;
    }

    /**
     * float 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	int	Column Index
     * @return 	float
     */
    public	float	getFloat(int columnIndex)
    {
		//칼럼의 위치로 찾아내는 메소드를 이용함...
		return getFloat( findIndex(columnIndex) );
    }

    /**
     * int 타입 칼럼을 Column Index를 이용하여 얻는다.
     *
     * @param 	int Column Index
     * @return 	int
     */
    public	int	getInt(String columnName)
    {
		try
		{
            if( m_nRecordPos <= 0 ) return -1;
	    	Hashtable	pt	= (Hashtable)m_vt.elementAt(  m_nRecordPos -1 );
    	    Integer	bt	= new Integer( (String)pt.get( columnName.toLowerCase() ) );//default value로 0을 설정
	    	return bt.intValue();
		}
        catch (Exception e)
		{
            System.out.println("LIB -> DBResultSet : getInt Error At " + columnName.toLowerCase());
	    	System.out.println("LIB -> DBResultSet : " + e.getMessage() );
	    	e.printStackTrace();
        }
		return -1;
    }

    /**
     * int 타입 칼럼을 Column Name을 이용하여 얻는다.
     *
     * @param 	String	Column Name
     * @return 	int
     */
    public	int	getInt(int columnIndex)
    {
        //칼럼의 위치로 찾아내는 메소드를 이용함...
		return getInt( findIndex(columnIndex) );
    }

    /**
     * long 타입 칼럼을 Column Index를 이용하여 얻는다.
     *
     * @param 	int 	Column Index
     * @return 	long
     */
    public	long	getLong(String columnName)
    {

    	try
    	{
            if( m_nRecordPos <= 0 ) return -1;
            Hashtable	pt	= (Hashtable)m_vt.elementAt(m_nRecordPos - 1);

	    	Long bt	= new Long( (String)pt.get( columnName.toLowerCase()) );//default value로 0을 설정
	    	return bt.longValue();
		}
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getLong Error At " + columnName.toLowerCase());
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
		return -1;
    }

    /**
     * long 타입 칼럼을 Column Index을 이용하여 얻는다.
     *
     * @param 	String	Column Index
     * @return 	long
     */
    public	long	getLong(int columnIndex)
    {
		//칼럼의 위치로 찾아내는 메소드를 이용함...
		return getLong( findIndex(columnIndex) );
    }

    /**
    * String 타입 칼럼을 Column Name를 이용하여 얻는다.
    * 이때 데이터베이스의 Charater Set을 System의 Chracter Set으로 변환한다.
    *
    * @param 	int 	Column Name
    * @return 	string
    */
    public	String	getString(String columnName)
    {
        try
        {
            if( m_nRecordPos <= 0 ) return "<record position is 0>";
            Hashtable	pt	= (Hashtable)m_vt.elementAt(m_nRecordPos - 1);

            // Character Set을 변환하여 가져온다.
            String	str	= (String)pt.get(columnName.toLowerCase());
            if( str == null ) str     = "";

            return str;
		}
		catch (Exception e)
		{
            System.out.println("LIB -> DBResultSet : getString Error At " + columnName.toLowerCase());
            System.out.println("LIB -> DBResultSet : " + e.getMessage() );
            e.printStackTrace();
        }
		return "";
    }

    /**
    * String 타입 칼럼을 Column Index을 이용하여 얻는다.
    * 이때 데이터베이스의 Charater Set을 System의 Chracter Set으로 변환한다.
    *
    * @param 	String	Column Index
    * @return 	string
    */
    public	String	getString(int columnIndex)
    {
	//칼럼의 위치로 찾아내는 메소드를 이용함...
        return getString( findIndex(columnIndex) );
    }

    /**
     * 현재 담고 있는 Vector의 레코드 갯수를 반환시킴
     *
     * @return int	rowcount
     */
    public	int	getRowCount( )
    {
		try
		{
            return m_vt.size();
		}//try finish
		catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getRowCount Error ");
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
	    }
		return -1;
    }

    /**
     * 멤버 Vector의 레코드 컬럼 갯수를 반환시킴
     *
     * @return int	Columncount
     */
    public	int	getColumnCount( )
    {
        try
        {
    	    return m_nColumnCnt;
        }//try finish
		catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getColumnCount Error ");
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
	return -1;
    }


    /**
     * 일부의 Row만 담았을 경우 ResultSet의 내의 총 총 멤버 Vector의 레코드 컬럼 갯수를 반환시킴
     *
     * @return int	MaxRowCount
     */
    public	int	getMaxRowCount( )
    {
    	try
		{
	    	return m_nRecordCnt;
		}//try finish
        catch (Exception e)
		{
		    System.out.println("LIB -> DBResultSet : getMaxRowCount Error ");
		    System.out.println("LIB -> DBResultSet : " + e.getMessage() );
		    e.printStackTrace();
        }
        return -1;
    }

    public Hashtable getRowData()
    {
        try {
            if( m_nRecordPos <= 0 ) return null;
            return (Hashtable)m_vt.elementAt(m_nRecordPos-1);
        }
        catch(Exception e) {
            System.out.println("LIB -> DBResultSet : getRowData Error ");
            System.out.println("LIB -> DBResultSet : " + e.getMessage() );
            e.printStackTrace();
            return null;
        }
    }
	/*
	지우지 말것
	pt.list( System.out) ;
	Object a = pt.getProperty( "" + columnIndex );
        System.out.println("a instanceof String = " + a+   (a instanceof String));
	System.out.println("a instanceof Long = " +   (a instanceof Long));
	System.out.println("a instanceof Integer = " +   (a instanceof Integer));
	System.out.println("a instanceof Double = " +   (a instanceof Double));
	System.out.println("a instanceof FLOAT = " +   (a instanceof Float));
	System.out.println("a instanceof DATE = " +   (a instanceof java.sql.Date));
	System.out.println("a instanceof Byte = " +   (a instanceof Byte));
	System.out.println("a instanceof Time = " +   (a instanceof Time));
	System.out.println("a instanceof BigDecimal = " +   (a instanceof java.math.BigDecimal));
	*/
}

