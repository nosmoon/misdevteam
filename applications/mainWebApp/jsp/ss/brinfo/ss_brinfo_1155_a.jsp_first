<%@ page contentType="text/xml; charset=KSC5601" %>
<%@ include file="/jsp/ss/comm_jsp/ss_common_x.jsp" %>
<%@ page import="java.lang.reflect.Field"%>

<%---------------------------------------------------------------------------------------------------
* 파일명 	 : ss_brinfo_1155_a.jsp
* 기능 		 : 은행계좌관리 초기화면
* 작성일자 	 :
* 작성자 	 :
---------------------------------------------------------------------------------------------------%>

<%---------------------------------------------------------------------------------------------------
* 수정내역 : TrustForm 대응 구조로 변경.
* 수정자 : 황성진
* 수정일자 : 20090122
* 백업파일명 : ss_brinfo_1155_a.jsp_org
---------------------------------------------------------------------------------------------------%>
<%!
	public void makeRecordToXml(Object obj, int depth, RwXml rx)
	{
		if(obj == null)
			return;
		
		Field[] flds = obj.getClass().getFields();
		String name = "";
		String type = "";
		for(int i=0; flds!=null && i<flds.length; i++)
	    {
			name = flds[i].getName();
	    	type = flds[i].getType().getName();
	    	try{
	    		rx.add(depth, name, (String)flds[i].get(obj));
	    	}catch(Exception e){
	    		//what to do...
	    		System.out.println(e);
	    	}
	    }
	}

	public void makeDataToXml(Object obj, String field, int depth, String tag, RwXml rx)
	{
		if(obj == null)
			return;
		try{
			int rdepth = 0;
			int tdepth = rx.add(depth, tag, "");
			ArrayList arr = (ArrayList)obj.getClass().getField(field).get(obj);
			
			for(int i=0; arr!=null && i<arr.size(); i++)
			{
				Object rec = arr.get(i);
				if(rec != null)
				{
					rdepth = rx.add(tdepth, "record", "");
					makeRecordToXml(rec, rdepth, rx);
				}
			}
		}catch(Exception e){
			//what to do...
			System.out.println(e);
		}
	}
%>

<%
    //	dataset 인스턴스 선언부분
    SS_L_BOACCT_LISTDataSet ds = (SS_L_BOACCT_LISTDataSet)request.getAttribute("ds");  // request dataset
    int listCount = 20;	// 한 화면당 리스트 항목 수
    String incmgpers = Util.getSessionParameterValue(request, "uid", true);
    
    RwXml rx = new RwXml();			//TrustForm 서버처리 객체.
    int root = RwXml.rootNodeID;
    int acctTemp = rx.add(root, "getAcctTemp", "");
    int acctItemCombo = 0;
    int bankCombo = 0;
    int itemDepth = 0;
    int acctGrid  = 0;
    int recDepth  = 0;

    //acctitem 처리.
    acctItemCombo  = rx.add(acctTemp, "acctItemCombo" , "");
    for(int i=0; i<ds.accitmcur.size(); i++){
		SS_L_BOACCT_LISTACCITMCURRecord rec = (SS_L_BOACCT_LISTACCITMCURRecord)ds.accitmcur.get(i);
		
		itemDepth = rx.add(acctItemCombo, "item" , "");
		rx.add(itemDepth, "label", rec.cicdnm);
		rx.add(itemDepth, "value", rec.cicodeval);
	}
    
    //은행계좌 처리.
    bankCombo  = rx.add(acctTemp, "bankCombo" , "");
    for(int i=0; i<ds.bankcur.size(); i++){
		SS_L_BOACCT_LISTBANKCURRecord rec = (SS_L_BOACCT_LISTBANKCURRecord)ds.bankcur.get(i);
		
		itemDepth = rx.add(bankCombo, "item" , "");
		rx.add(itemDepth, "label", rec.cicdnm);
		rx.add(itemDepth, "value", rec.cicodeval);
    }

   	//계좌조회 결과.
   	makeDataToXml(ds, "curcommlist", acctTemp, "acctGrid", rx);
    /*acctGrid  = rx.add(acctTemp, "acctGrid" , "");
    for(int i=0; i<ds.curcommlist.size(); i++){
    	SS_L_BOACCT_LISTCURCOMMLISTRecord curcommlistRec = (SS_L_BOACCT_LISTCURCOMMLISTRecord)ds.curcommlist.get(i);
    	
    	recDepth = rx.add(acctGrid, "record", "");
    	
    	rx.add(recDepth, "areanm", curcommlistRec.areanm);
    	rx.add(recDepth, "bonm", curcommlistRec.bonm);
    	rx.add(recDepth, "girono", curcommlistRec.girono);
    	rx.add(recDepth, "cd_atmyn", curcommlistRec.cd_atmyn);
    	rx.add(recDepth, "acctitem_nm", curcommlistRec.acctitem_nm);
    	rx.add(recDepth, "bankcd_nm", curcommlistRec.bankcd_nm);
    	rx.add(recDepth, "deps_persnm", curcommlistRec.deps_persnm);
    	rx.add(recDepth, "acctno", curcommlistRec.acctno);
    	rx.add(recDepth, "chgdt", curcommlistRec.chgdt);
    	rx.add(recDepth, "chgpers", curcommlistRec.chgpers);
    	
    	rx.add(recDepth, "seq", curcommlistRec.seq);
    	rx.add(recDepth, "bocd", curcommlistRec.bocd);
    	rx.add(recDepth, "bankcd", curcommlistRec.bankcd);
    	rx.add(recDepth, "remk", curcommlistRec.remk);
    	rx.add(recDepth, "acctitem", curcommlistRec.acctitem);
    	
    	//if(i==0)
    	//{
    	//	Field[] flds = curcommlistRec.getClass().getFields();
    	//    for(int j=0; flds!=null && j<flds.length; j++)
    	//    {
    	//    	System.out.println(flds[j].getName());
    	//    	System.out.println(flds[j].getType().getName());
    	//    	System.out.println((String)flds[j].get(curcommlistRec));
    	//    }
    	//}
    }*/
    
    //System.out.println(rx.getXml());
    out.println(rx.xmlFlush());
	out.println(rx.xmlEndFlush());
    
    //data가 없을 경우 처리. 추가 필요.
        
    //page 처리. 추가 필요.
%>





